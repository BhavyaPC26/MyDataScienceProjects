# -*- coding: utf-8 -*-
"""Thyroid-Cancer-Risk-Using-Random-Forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q-eJfm1YE6xTPffQuLJoOujPFohONbm_
"""

from google.colab import files
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')
import seaborn as sns
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, OneHotEncoder, LabelEncoder
from sklearn.ensemble import RandomForestClassifier,BaggingClassifier,AdaBoostClassifier, GradientBoostingClassifier
from sklearn.metrics import classification_report, accuracy_score

df = pd.read_csv('thyroid_cancer_risk_data.csv')
df.head(5)

df.info()

df.describe()

df.isnull().sum()

df[df.duplicated()]

# Age Distribution
plt.figure(figsize=(10, 5))
sns.histplot(df["Age"], bins=10, kde=True, color="darkblue")
plt.title("Age Distribution of Patients")
plt.xlabel("Age")
plt.ylabel("Count")
plt.show()

# Gender Distribution
plt.figure(figsize=(6, 4))
sns.countplot(x="Gender", data=df, palette="coolwarm")
plt.title("Gender Distribution")
plt.show()

# Family History vs. Diagnosis
plt.figure(figsize=(6, 4))
sns.countplot(x="Family_History", hue="Diagnosis", data=df, palette="viridis")
plt.title("Impact of Family History on Thyroid Cancer Diagnosis")
plt.show()

#TSH Levels by Diagnosis
plt.figure(figsize=(6, 4))
sns.boxplot(x="Diagnosis", y="TSH_Level", data=df, palette="coolwarm")
plt.title("TSH Levels by Diagnosis")
plt.show()

#T3 Levels by Diagnosis
plt.figure(figsize=(6, 4))
sns.boxplot(x="Diagnosis", y="T3_Level", data=df, palette="coolwarm")
plt.title("T3 Levels by Diagnosis")
plt.show()

#T4 Levels by Diagnosis
plt.figure(figsize=(6, 4))
sns.boxplot(x="Diagnosis", y="T4_Level", data=df, palette="coolwarm")
plt.title("T4 Levels by Diagnosis")
plt.show()

df.corr(numeric_only=True)

# Heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

numeric_cols = ['Age','TSH_Level','T3_Level','T4_Level','Nodule_Size']
categorical_cols = ['Gender', 'Country', 'Ethnicity', 'Family_History',
                    'Radiation_Exposure', 'Iodine_Deficiency', 'Smoking',
                    'Obesity', 'Diabetes','Diagnosis']

preprocessor = ColumnTransformer(
    transformers=[
        ('num', StandardScaler(), numeric_cols),  # Scale numeric columns
        ('cat', OneHotEncoder(), categorical_cols)  # Encode categorical columns
    ])

le = LabelEncoder()
df['Thyroid_Cancer_Risk'] = le.fit_transform(df['Thyroid_Cancer_Risk'])

pipelines = {
    "Random Forest": Pipeline([
        ("preprocessor", preprocessor),
        ("classifier", RandomForestClassifier(n_estimators=100, random_state=42))
    ]),
    "Bagging": Pipeline([
        ("preprocessor", preprocessor),
        ("classifier", BaggingClassifier(n_estimators=100, random_state=42))
    ]),
    "AdaBoost": Pipeline([
        ("preprocessor", preprocessor),
        ("classifier", AdaBoostClassifier(n_estimators=100, random_state=42))
    ]),
    "Gradient Boosting": Pipeline([
        ("preprocessor", preprocessor),
        ("classifier", GradientBoostingClassifier(n_estimators=100, random_state=42))
    ]),
}

X = df.drop(['Patient_ID', 'Thyroid_Cancer_Risk'], axis=1)
y = df['Thyroid_Cancer_Risk']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

for name, pipeline in pipelines.items():
    pipeline.fit(X_train, y_train)
    score = pipeline.score(X_test, y_test)
    print(f"{name} Accuracy: {score:.2f}")