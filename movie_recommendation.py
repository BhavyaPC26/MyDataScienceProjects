# -*- coding: utf-8 -*-
"""Movie_recommendation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XSxy2FawArJk9Ga5Q9T8Jikr1fkDnNE1
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MinMaxScaler
import numpy as np

from google.colab import files
uploaded = files.upload()

df=pd.read_csv('merged_dataset.csv')
df

df.columns

df.info()

df.duplicated().sum()

df = df.drop_duplicates(inplace=True)

df.corr(numeric_only=True)

df['genres'] = df['genres'].str.lower()

# TF-IDF Vectorization for genres
vectorizer = TfidfVectorizer(stop_words='english')
genre_matrix = vectorizer.fit_transform(df['genres'])

# Normalize numerical features
scaler = MinMaxScaler()
numeric_features = df[['rating', 'num_raters', 'num_reviews']]
numeric_scaled = scaler.fit_transform(numeric_features)

combined_features = np.hstack((numeric_scaled, genre_matrix.toarray()))

cosine_sim = cosine_similarity(combined_features, combined_features)

def recommend_movies(movie_name, num_recommendations=5):
    if movie_name not in df['name'].values:
        return "Movie not found. Please try another title."

    movie_index = df[df['name'] == movie_name].index[0]
    similarity_scores = list(enumerate(cosine_sim[movie_index]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    recommended_indices = [i[0] for i in similarity_scores[1:num_recommendations+1]]

    return df['name'].iloc[recommended_indices].tolist()

movie_to_search = "Inception"
recommended_movies = recommend_movies(movie_to_search)
print(f"Movies similar to {movie_to_search} based on rating, raters, reviews, and genres: {recommended_movies}")