# -*- coding: utf-8 -*-
"""Youtube_Sentiment_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r_vZ23_rsPKj9s-FPuVS09QKsUiD3nfM
"""

import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import make_pipeline
from sklearn.metrics import accuracy_score, classification_report

from google.colab import files
uploaded = files.upload()

df= pd.read_csv('YoutubeCommentsDataSet.csv')
df

nltk.download('stopwords')
nltk.download('punkt')
nltk.download('omw-1.4')

df = df.dropna(subset=['Comment'])

import nltk
nltk.download('punkt_tab')

# Text Preprocessing Function
def preprocess_text(text):
    text = text.lower()  # Convert to lowercase
    text = re.sub(r'[^a-zA-Z\s]', '', text)  # Remove special characters
    tokens = word_tokenize(text)  # Tokenization
    tokens = [word for word in tokens if word not in stopwords.words('english')]  # Remove stopwords
    return ' '.join(tokens)

# Apply preprocessing
df['Cleaned_Comment'] = df['Comment'].apply(preprocess_text)

X_train, X_test, y_train, y_test = train_test_split(df['Cleaned_Comment'], df['Sentiment'], test_size=0.2, random_state=42)

# Create a pipeline with TF-IDF Vectorizer and Naive Bayes Classifier
model = make_pipeline(TfidfVectorizer(), MultinomialNB())

# Train the model
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
report = classification_report(y_test, y_pred)
print(f"Accuracy: {accuracy:.4f}")
print("Classification Report:\n", report)